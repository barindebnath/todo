{"version":3,"sources":["Input.js","Contain.js","App.js","serviceWorker.js","index.js"],"names":["Input","useState","arr","setArr","onSubmit","e","preventDefault","value","target","firstChild","console","log","handleSubmit","className","placeholder","required","map","item","i","key","onClick","id","newList","filter","handleRemove","Contain","props","theme","style","backgroundColor","bgcolor","emoji","heading","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mLAEaA,EAAQ,WAAO,IAAD,EACHC,mBAAS,IADN,mBAClBC,EADkB,KACbC,EADa,KAczB,OACE,6BACE,0BAAMC,SAAU,SAACC,GAAD,OAdC,SAACA,GACpBA,EAAEC,iBACF,IAAIC,EAAQF,EAAEG,OAAOC,WAAWF,MAChCJ,EAAO,GAAD,mBAAKD,GAAL,CAAUK,KAChBF,EAAEG,OAAOC,WAAWF,MAAQ,GAC5BG,QAAQC,IAAIT,GASaU,CAAaP,IAAIQ,UAAU,eAChD,2BAAOA,UAAU,eAAeC,YAAY,eAAeC,UAAQ,IACnE,4BAAQF,UAAU,iBAChB,uBAAGA,UAAU,kBAIjB,wBAAIA,UAAU,cACXX,EAAIc,KAAI,SAACC,EAAMC,GAAP,OACP,wBAAIC,IAAKD,EAAGL,UAAU,uDACpB,wBAAIA,UAAU,qBAAqBI,GACnC,4BAAQG,QAAS,kBAlBN,SAACC,GACpB,IAAMC,EAAUpB,EAAIqB,QAAO,SAACN,EAAMC,GAAP,OAAaA,IAAMG,KAC9ClB,EAAOmB,GAgBwBE,CAAaN,IAAIL,UAAU,uCAChD,uBAAGA,UAAU,yBC3BdY,EAAU,SAACC,GACtB,OACE,yBAAKb,UAAWa,EAAMC,MAAOC,MAAO,CAAEC,gBAAiBH,EAAMI,UAC3D,wBAAIjB,UAAU,QACXa,EAAMK,MACNL,EAAMM,SAET,kBAAC,EAAD,QCPOC,EAAM,WACjB,OACE,yBAAKpB,UAAU,mBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAASc,MAAM,yCAAyCG,QAAQ,UAAUE,QAAQ,cAAcD,MAAO,uBAAGlB,UAAU,yBAEtH,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAASc,MAAM,wCAAwCG,QAAQ,UAAUE,QAAQ,kBAAkBD,MAAO,uBAAGlB,UAAU,uBCC7GqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.ef46a11e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const Input = () => {\r\n  const [arr, setArr] = useState([]);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    var value = e.target.firstChild.value;\r\n    setArr([...arr, value]);\r\n    e.target.firstChild.value = \"\";\r\n    console.log(arr);\r\n  };\r\n  const handleRemove = (id) => {\r\n    const newList = arr.filter((item, i) => i !== id);\r\n    setArr(newList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={(e) => handleSubmit(e)} className=\"d-flex mb-3\">\r\n        <input className=\"form-control\" placeholder=\"Add New Item\" required />\r\n        <button className=\"btn btn-light\">\r\n          <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n      </form>\r\n\r\n      <ul className=\"list-group\">\r\n        {arr.map((item, i) => (\r\n          <li key={i} className=\"d-flex list-group-item border-0 px-0 bg-transparent\">\r\n            <h6 className=\"form-control mb-0\">{item}</h6>\r\n            <button onClick={() => handleRemove(i)} className=\"btn btn-light float-right block-btn\">\r\n              <i className=\"fas fa-times\"></i>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"./Input\";\r\n\r\nexport const Contain = (props) => {\r\n  return (\r\n    <div className={props.theme} style={{ backgroundColor: props.bgcolor }}>\r\n      <h3 className=\"mb-4\">\r\n        {props.emoji}\r\n        {props.heading}\r\n      </h3>\r\n      <Input />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Contain } from \"./Contain\";\n\nexport const App = () => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row mt-4\">\n        <div className=\"col-md-6 mb-4\">\n          <Contain theme=\"alert-success p-4 rounded-lg shadow-sm\" bgcolor=\"#c9f5d3\" heading=\" To Do List\" emoji={<i className=\"far fa-laugh-beam\"></i>} />\n        </div>\n        <div className=\"col-md-6 mb-4\">\n          <Contain theme=\"alert-danger p-4 rounded-lg shadow-sm\" bgcolor=\"#f7ced2\" heading=\" Not To Do List\" emoji={<i className=\"far fa-frown\"></i>} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}